{"version":3,"sources":["mobX/pokemon.js","helpers.js","components/DisplayPokemon.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Pokemon","limit","searchValue","data","types","loadingPokemons","filterTypes","changeTypes","changeSearch","value","getPokemons","a","axios","get","pokemons","Promise","all","results","map","pokemon","id","url","match","then","res","info","sprite","sprites","front_default","type","name","stats","stat","base_stat","runInAction","this","filter","pok","search","toLowerCase","length","includes","indexOf","decorate","observable","action","computed","bound","getColor","normal","poison","fire","water","electric","fighting","ground","psychic","dark","rock","steel","grass","ice","flying","bug","ghost","dragon","fairy","DisplayPokemon","observer","useEffect","style","background","padding","grid","gutter","xs","sm","md","lg","xl","xxl","dataSource","loading","pagination","total","pageSizeOptions","defaultPageSize","showSizeChanger","showQuickJumper","renderItem","Item","headStyle","color","bordered","title","cover","alt","src","column","size","baseStat","label","key","Search","Group","width","onChange","checkedValues","defaultValue","paddingLeft","paddingRight","span","textAlign","marginTop","placeholder","onKeyUp","e","target","App","props","store","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"k1BAGMA,E,4DACJC,MAAQ,I,KACRC,YAAc,G,KACdC,KAAO,G,KAgBPC,MAAQ,CACN,SACA,SACA,OACA,QACA,WACA,WACA,SACA,UACA,OACA,OACA,QACA,QACA,MACA,SACA,MACA,QACA,SACA,S,KAEFC,iBAAkB,E,KAClBC,YAAc,G,KACdC,YAAc,WAAyB,IAAxBH,EAAuB,uDAAf,EAAKA,MAC1B,EAAKE,YAAcF,G,KAErBI,aAAe,WAAiB,IAAhBC,EAAe,uDAAP,GACtB,EAAKP,YAAcO,G,KAErBC,Y,sBAAc,8BAAAC,EAAA,6DACZ,EAAKN,iBAAkB,EADX,SAEWO,IAAMC,IAAN,mDACuB,EAAKZ,QAHvC,cAENa,EAFM,gBAKOC,QAAQC,IACzBF,EAASX,KAAKc,QAAQC,IAAtB,uCAA0B,WAAMC,GAAN,uBAAAR,EAAA,6DAClBS,EAAKD,EAAQE,IAAIC,MAAM,kBAAkB,GADvB,SAELV,IAChBC,IADgB,4CACyBO,EADzB,MAEhBG,MAAK,SAAAC,GAAG,OAAIA,EAAIrB,QAJK,cAElBsB,EAFkB,OAKlBC,EAASD,EAAKE,QAAQC,eAAiB,GACvCC,EAAOJ,EAAKrB,MAAM,GAAGyB,KAAKC,MAAQ,OAClCC,EAAQN,EAAKM,MAAMb,KAAI,SAAAc,GAG3B,MAAO,CAFUA,EAAKC,UACTD,EAAKA,KAAKF,SATD,uBAYZX,EAZY,CAYHC,KAAIM,SAAQG,OAAMJ,OAAMM,WAZrB,2CAA1B,wDANU,OAKN5B,EALM,OAqBZ+B,aAAY,WACV,EAAK/B,KAAOA,EACZ,EAAKE,iBAAkB,KAvBb,2C,qDA3CE,IAAD,OACb,OAAO8B,KAAKhC,KAAKiC,QAAO,SAAAC,GACtB,IAAMD,EAAS,EAAK9B,YACdgC,EAAS,EAAKpC,YAAYqC,cAChC,OAAIH,EAAOI,QAAqB,KAAXF,EACZF,EAAOK,SAASJ,EAAIR,QAAuC,IAA9BQ,EAAIP,KAAKY,QAAQJ,GAC5CF,EAAOI,OACTJ,EAAOK,SAASJ,EAAIR,MACP,KAAXS,IAC4B,IAA9BD,EAAIP,KAAKY,QAAQJ,U,KA8DhCK,YAAS3C,EAAS,CAChBE,YAAa0C,IACb3C,MAAO2C,IACPzC,KAAMyC,IACNtC,YAAasC,IACbrC,YAAasC,IACbrC,aAAcqC,IACdxC,gBAAiBuC,IACjB9B,SAAUgC,IACVpC,YAAamC,IAAOE,QAGP,UAAI/C,E,qDC1FNgD,EAAW,SAAAnB,GAqBtB,MApBc,CACZoB,OAAQ,UACRC,OAAQ,UACRC,KAAM,UACNC,MAAO,UACPC,SAAU,UACVC,SAAU,UACVC,OAAQ,UACRC,QAAS,UACTC,KAAM,UACNC,KAAM,kBACNC,MAAO,mBACPC,MAAO,kBACPC,IAAK,mBACLC,OAAQ,mBACRC,IAAK,kBACLC,MAAO,kBACPC,OAAQ,kBACRC,MAAO,sBAEIrC,IAAS,WCsCTsC,EAtDQC,aACrB,YAAiD,IAA9CtD,EAA6C,EAA7CA,SAAUJ,EAAmC,EAAnCA,YAAaL,EAAsB,EAAtBA,gBAOxB,OANAgE,qBAAU,WAEC3D,MAGR,CAACA,IAEF,yBAAK4D,MAAO,CAAEC,WAAY,UAAWC,QAAS,SAC5C,kBAAC,IAAD,CACEC,KAAM,CACJC,OAAQ,EACRC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,IAAK,GAEPC,WAAYnE,EACZoE,QAAS7E,EACT8E,WAAY,CACVC,MAAOtE,EAAS0B,OAChB6C,gBAAiB,CAAC,KAAM,KAAM,MAC9BC,gBAAiB,GACjBC,iBAAiB,EACjBC,iBAAiB,GAEnBC,WAAY,gBAAG3D,EAAH,EAAGA,KAAMJ,EAAT,EAASA,OAAQG,EAAjB,EAAiBA,KAAME,EAAvB,EAAuBA,MAAvB,OACV,kBAAC,IAAK2D,KAAN,KACE,kBAAC,IAAD,CACEC,UAAW,CAAEC,MAAO5C,EAASnB,IAC7BgE,UAAQ,EACRC,MAAOhE,EACPiE,MAAO,yBAAKC,IAAKlE,EAAMmE,IAAKvE,MAE9B,kBAAC,IAAD,CAAcmE,UAAQ,EAACK,OAAQ,EAAGC,KAAK,SACpCpE,EAAMb,KAAI,YAAuB,IAAD,mBAApBkF,EAAoB,KAAVtE,EAAU,KAC/B,OACE,kBAAC,IAAa4D,KAAd,CAAmBW,MAAOvE,EAAMwE,IAAKxE,GAClCsE,e,kCCRRG,EAjCAnC,aAAS,YAA2C,IAAxChE,EAAuC,EAAvCA,MAAOG,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAE7C,OACE,6BACE,kBAAC,IAASgG,MAAV,CACElC,MAAO,CAAEmC,MAAO,QAChBC,SALmB,SAAAC,GAAa,OAAIpG,EAAYoG,IAMhDC,aAAcxG,GAEd,qCACA,kBAAC,IAAD,CAAKkE,MAAO,CAAEuC,YAAa,MAAOC,aAAc,OAC7C1G,EAAMc,KAAI,SAAAW,GACT,OACE,kBAAC,IAAD,CAAKkF,KAAM,EAAGT,IAAKzE,EAAMyC,MAAO,CAAE0C,UAAW,SAC3C,kBAAC,IAAD,CAAU1C,MAAO,CAAEsB,MAAO5C,EAASnB,IAASpB,MAAOoB,GAChDA,SAOb,kBAAC,IAAM0E,OAAP,CACEjC,MAAO,CAAEmC,MAAO,MAAOQ,UAAW,MAClCC,YAAY,kBACZC,QAAS,SAAAC,GACP5G,EAAa4G,EAAEC,OAAO5G,cCDjB6G,EAzBHlD,aAAS,SAAAmD,GAAU,IAAD,EAQxBA,EAAMC,MANR9G,EAF0B,EAE1BA,YACAI,EAH0B,EAG1BA,SACAV,EAJ0B,EAI1BA,MACAG,EAL0B,EAK1BA,YACAC,EAN0B,EAM1BA,aACAH,EAP0B,EAO1BA,gBAEF,OACE,yBAAKiE,MAAO,CAAE0C,UAAW,WACvB,kBAAC,EAAD,CACE5G,MAAOA,EACPG,YAAaA,EACbC,aAAcA,IAEhB,kBAAC,EAAD,CACEM,SAAUA,EACVJ,YAAaA,EACbL,gBAAiBA,QCZLoH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAStG,MACvB,2DCXNuG,IAASC,OAAO,kBAAC,EAAD,CAAKN,MAAOA,IAAWO,SAASC,eAAe,SD0HzD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5G,MAAK,SAAA6G,GACjCA,EAAaC,kB","file":"static/js/main.a8aff60a.chunk.js","sourcesContent":["import { action, computed, decorate, observable, runInAction } from 'mobx'\r\nimport axios from 'axios'\r\n\r\nclass Pokemon {\r\n  limit = 100\r\n  searchValue = ''\r\n  data = []\r\n  get pokemons() {\r\n    return this.data.filter(pok => {\r\n      const filter = this.filterTypes\r\n      const search = this.searchValue.toLowerCase()\r\n      if (filter.length && search !== '') {\r\n        return filter.includes(pok.type) && pok.name.indexOf(search) !== -1\r\n      } else if (filter.length) {\r\n        return filter.includes(pok.type)\r\n      } else if (search !== '') {\r\n        return pok.name.indexOf(search) !== -1\r\n      } else {\r\n        return true\r\n      }\r\n    })\r\n  }\r\n  types = [\r\n    'normal',\r\n    'poison',\r\n    'fire',\r\n    'water',\r\n    'electric',\r\n    'fighting',\r\n    'ground',\r\n    'psychic',\r\n    'dark',\r\n    'rock',\r\n    'steel',\r\n    'grass',\r\n    'ice',\r\n    'flying',\r\n    'bug',\r\n    'ghost',\r\n    'dragon',\r\n    'fairy'\r\n  ]\r\n  loadingPokemons = false\r\n  filterTypes = []\r\n  changeTypes = (types = this.types) => {\r\n    this.filterTypes = types\r\n  }\r\n  changeSearch = (value = '') => {\r\n    this.searchValue = value\r\n  }\r\n  getPokemons = async () => {\r\n    this.loadingPokemons = true\r\n    const pokemons = await axios.get(\r\n      `https://pokeapi.co/api/v2/pokemon/?limit=${this.limit}`\r\n    )\r\n    const data = await Promise.all(\r\n      pokemons.data.results.map(async pokemon => {\r\n        const id = pokemon.url.match(/pokemon\\/(\\d+)/)[1]\r\n        const info = await axios\r\n          .get(`https://pokeapi.co/api/v2/pokemon/${id}/`)\r\n          .then(res => res.data)\r\n        const sprite = info.sprites.front_default || ''\r\n        const type = info.types[0].type.name || 'fire'\r\n        const stats = info.stats.map(stat => {\r\n          const baseStat = stat.base_stat\r\n          const name = stat.stat.name\r\n          return [baseStat, name]\r\n        })\r\n        return { ...pokemon, id, sprite, type, info, stats }\r\n      })\r\n    )\r\n    runInAction(() => {\r\n      this.data = data\r\n      this.loadingPokemons = false\r\n    })\r\n  }\r\n}\r\n\r\ndecorate(Pokemon, {\r\n  searchValue: observable,\r\n  limit: observable,\r\n  data: observable,\r\n  filterTypes: observable,\r\n  changeTypes: action,\r\n  changeSearch: action,\r\n  loadingPokemons: observable,\r\n  pokemons: computed,\r\n  getPokemons: action.bound\r\n})\r\n\r\nexport default new Pokemon()\r\n","export const getColor = type => {\r\n  const color = {\r\n    normal: '#A8A878',\r\n    poison: '#A040A0',\r\n    fire: '#F08030',\r\n    water: '#6890F0',\r\n    electric: '#F8D030',\r\n    fighting: '#C03028',\r\n    ground: '#E0C068',\r\n    psychic: '#F85888',\r\n    dark: '#6E5647',\r\n    rock: 'rgb(184,160,56)',\r\n    steel: 'rgb(184,184,208)',\r\n    grass: 'rgb(120,200,80)',\r\n    ice: 'rgb(152,216,216)',\r\n    flying: 'rgb(168,144,240)',\r\n    bug: 'rgb(168,184,32)',\r\n    ghost: 'rgb(112,88,152)',\r\n    dragon: 'rgb(112,56,248)',\r\n    fairy: 'rgb(240, 182, 188)'\r\n  }\r\n  return color[type] || '#C03028'\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport { Card, List, Descriptions } from 'antd'\r\nimport { getColor } from '../helpers'\r\n\r\nconst DisplayPokemon = observer(\r\n  ({ pokemons, getPokemons, loadingPokemons }) => {\r\n    useEffect(() => {\r\n      function fetchPokemons() {\r\n        return getPokemons()\r\n      }\r\n      fetchPokemons()\r\n    }, [getPokemons])\r\n    return (\r\n      <div style={{ background: '#ECECEC', padding: '15px' }}>\r\n        <List\r\n          grid={{\r\n            gutter: 8,\r\n            xs: 1,\r\n            sm: 2,\r\n            md: 4,\r\n            lg: 4,\r\n            xl: 6,\r\n            xxl: 8\r\n          }}\r\n          dataSource={pokemons}\r\n          loading={loadingPokemons}\r\n          pagination={{\r\n            total: pokemons.length,\r\n            pageSizeOptions: ['10', '20', '50'],\r\n            defaultPageSize: 10,\r\n            showSizeChanger: true,\r\n            showQuickJumper: true\r\n          }}\r\n          renderItem={({ name, sprite, type, stats }) => (\r\n            <List.Item>\r\n              <Card\r\n                headStyle={{ color: getColor(type) }}\r\n                bordered\r\n                title={name}\r\n                cover={<img alt={name} src={sprite} />}\r\n              />\r\n              <Descriptions bordered column={1} size=\"small\">\r\n                {stats.map(([baseStat, name]) => {\r\n                  return (\r\n                    <Descriptions.Item label={name} key={name}>\r\n                      {baseStat}\r\n                    </Descriptions.Item>\r\n                  )\r\n                })}\r\n              </Descriptions>\r\n            </List.Item>\r\n          )}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n)\r\n\r\nexport default DisplayPokemon\r\n","import React from 'react'\r\nimport { Checkbox, Input, Row, Col } from 'antd'\r\nimport { observer } from 'mobx-react'\r\nimport { getColor } from '../helpers'\r\n\r\nconst Search = observer(({ types, changeTypes, changeSearch }) => {\r\n  const onChangeCheckBox = checkedValues => changeTypes(checkedValues)\r\n  return (\r\n    <div>\r\n      <Checkbox.Group\r\n        style={{ width: '100%' }}\r\n        onChange={onChangeCheckBox}\r\n        defaultValue={types}\r\n      >\r\n        <div>Tags</div>\r\n        <Row style={{ paddingLeft: '15%', paddingRight: '5%' }}>\r\n          {types.map(type => {\r\n            return (\r\n              <Col span={8} key={type} style={{ textAlign: 'left' }}>\r\n                <Checkbox style={{ color: getColor(type) }} value={type}>\r\n                  {type}\r\n                </Checkbox>\r\n              </Col>\r\n            )\r\n          })}\r\n        </Row>\r\n      </Checkbox.Group>\r\n      <Input.Search\r\n        style={{ width: '90%', marginTop: '2%' }}\r\n        placeholder=\"Name of pokemon\"\r\n        onKeyUp={e => {\r\n          changeSearch(e.target.value)\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default Search\r\n","import React from 'react'\nimport DisplayPokemon from './components/DisplayPokemon'\nimport { observer } from 'mobx-react'\nimport Search from './components/Search'\n\nconst App = observer(props => {\n  const {\n    getPokemons,\n    pokemons,\n    types,\n    changeTypes,\n    changeSearch,\n    loadingPokemons\n  } = props.store\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <Search\n        types={types}\n        changeTypes={changeTypes}\n        changeSearch={changeSearch}\n      />\n      <DisplayPokemon\n        pokemons={pokemons}\n        getPokemons={getPokemons}\n        loadingPokemons={loadingPokemons}\n      />\n    </div>\n  )\n})\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport store from './mobX/pokemon'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App store={store} />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}